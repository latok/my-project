Узнать версию гита на ПК:
git --version

Настройка имени и почты автора:
git config --global user.name "Ivanov Ivan"
git config --global user.mail ivanov@gmail.com

Проверить все настройки Git можно с помощью команды:
git config --list

В терминале можно создать файл и записать в него некое содержимое:
echo "Some text" > file.txt

В терминале прочитать содержимое файла:
cat file.txt

В терминале удалить файл:
rm file.txt

Создание нового репозитория Git:
git init

Узнать название текущей ветки Git:
git branch

Переименовать текущую ветку Git можно командой:
git branch -m <name>

Прим.1 - Переименовать текущую ветку можно только если есть хотя бы один коммит.
************************************************************************
Посмотреть состояние индекса (staging area) можно с помощью команды:
git status
************************************************************************
Все объекты git находятся в папке objects.
   Для каждого файла в папке репозитория (objects) в папке .git создаются
подпапки и файлы с именами образованными на основаниии Хеш-сумм(sha1) этих файлов.
   В этих подпапках хранятся различные версии каждого файла, сохраненные в
репозитории после внесения изменений.
************************************************************************
Рабочий процесс Git:
- файлы создаются в рабочей директории проекта.
- файлы подготавливаются для сохранения в Репозитории Git с помощью команды
  git add . (для всех измененных и новых файлов) или выборочно с указ. имен
  Происходить добавление измененных или новых файлов в индекс(Staging area)
- Принимается решение о сохранении текущей версии проекта в Репозитории
  (для файлов подготовленных - то есть перенесенных в индекс)
  Это выполняется с помощью команды:
  git commit
  Коммит указывает на текущую версию проекта.
************************************************************************  
Перейти к определенной версии проекта применяется команда:
git checkout
  При этом система git берет все файлы выбранной версии проекта и перемещает их
в Рабочую директорию проекта(содержимое папок проекта будет изменено на то, что
было в момент сохранения изменений выбранной версии проекта).
Происходит перезапись всей папки проекта.
************************************************************************
У всех файлов в системе Git может быть четыре статуса:
Untracked (неотслеживаемый)
 - новые или не добавленные в индекс файлы
Staged (подготовленный)
 - файлы добавленные в индекс (staging area) или подготовленные для сохраннения
   изменений.
Unmodified (немодифицированый)
 - файл рабочей директории, подготовленый(staging) и сохранненый(commit)
   в Репозитории в котором на текущий момент нет внесено изменений.
   то есть версия файла в Рабочей директории и Репозитории
   - одинаковы(синхронизированы)
Modified (модифицированный)
 - файл уже находящийся в Рабочей директории, индексе, репозитории и при
   этом в него внесли изменения.
   Modified >>  Staged >>  Unmodified
************************************************************************
Каждый объект в системе Git имеет свой SHA1 ХЭШ
Файлы хранятся как тип - Blob
Папки хранятся как тип - Tree
Коммит хранятся как тип - Commit
Аннотированный тэг хранятся как тип - Annotated Tag
************************************************************************
Коммит - это указатель на дерево структуры папки проекта(корневой папки проекта).
HEAD - Это указать на текущую версию проекта в рабочей директории.
HEAD -> Ветки -> коммиты
Веток(main, master) в репозитории может быть несколько.
В каждой ветке есть своя цепочка коммитов. В текущей ветке указатель HEAD всегда 
указывает на последнюю версию (коммит).
Ветка всегда ссылается на последний коммит в этой ветке.
************************************************************************
Текущее состояние репозитория:
git status
************************************************************************
Подготовка определенных файлов перед коммитом:
git add <files>
 - добавляет указанные файлы в Индеск(staging area)
************************************************************************
Создание коммита с записью изменений в репозитории:
git commit -m "<message>"
 - все что было перенесено в Индекс - будет сохранено в репозитории(коммит)
************************************************************************
Просмотреть историю изменений(коммитов):
git log
************************************************************************
Перейти в определенную версию проекта(коммит) по указ части SHA1 ХЭШ-суммы коммита:
git checkout <commit hash>
 - это приведет к перемещению указателя HEAD на опред. ХЭШ определенного коммита и
   это изменит рабочую директорию.
************************************************************************   
Перейти к определенной версии проекта по названию ветки:
git checkout <branch name>
************************************************************************
Просмотреть содержимое коммита по первым символам ХЭШ-суммы:
git cat-file -t <part SHA1> - выведет тип объекта
git cat-file -p <part SHA1> - выведет содержимое объекта
************************************************************************
После создания корневого коммита(root-commit) при разработке проекта, может быть создано
множество других веток git для удобства разработки проекта. Это делается для организации
возможности разработки других частей проекта другими участками команды разработчиков
или сторонними разработчиками.Таким образом может вестись одновременная разработка множества
фунционала(модулей,сайта, и проч) проекта.
В системе Git переключение между ветками проекта делается путем перемещения указателя HEAD
на интересующую ветку.(Предполож так руков. проекта может смотреть и оценивать динамику
разработки других частей проекта в других ветках репозитория Git).
************************************************************************
Смена веток (перенос указателя HEAD) репозитория Git делается коммандой:
git checkout <branch name>
************************************************************************
Создание новой ветки:
git branch <branch name>
************************************************************************
Общая версия двух верхних команд. Создание новой ветки и переход в неё:
git checkout -b <branch name>
************************************************************************
Отображает список всех веток в локальном репозитории:
git branch 
************************************************************************
Переименование Текущей ветки:
git branch -m <new branch name>
************************************************************************
Удаление ветки (текущую ветку удалить нельзя):
git branch -d <branch name>
************************************************************************
Слияние другой ветки(feature branch) в текущую ветку(receiving branch):
git merge <feature branch name>
 - эту команду применяют только находясь в принимающей ветке(текущей)
************************************************************************ 
Клонирование удаленного репозитория в локальный:
git clone <url>
************************************************************************
Имя удаленного репозитория по умолчанию:
origin
Создается при клонировании удаленного репозитория по локальный ПК и 
возникает связь между удаленным репозиторием и локальным.
************************************************************************
Отображает все ветки, включая те, которые находятся в удаленных репозиториях:
git branch -a
************************************************************************
Загрузка и применение изменений с удаленной ветки в локальную:
git pull

Загрузка изменений из локальной ветки в ветку удаленного репозитория:
git push
************************************************************************
Связь существующего локального репозитория с удаленным:
 - подключение удаленного репозитория:
   git remote add origin <url>
   Предварительно нужно создать на GitHub новый пустой репозиторий
 - загрузка изменений из локально ветки в удаленную с созданием
   связи между ними:
   git push -u origin <branch>
   здесь <branch> - это название ветки в удаленном репозитории
   В дальнейшем загрузка изменений в ветку удаленного репозитория
   делается командой:
                      git push
	получение изменений из ветки удаленного репозитория
	                  git pull
************************************************************************					  
Проверка настройки связи с удаленным сервером репозитория:
git remote -v
Проверка настройки веток локального и удаленного репозиториев:
git branch -vv

   
